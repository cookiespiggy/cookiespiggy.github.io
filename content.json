{"pages":[],"posts":[{"title":"","text":"Java面试考点之什么是框架,为什么要用框架?框架是一个可以让我们腾出时间去召唤师峡谷一日游的神器","link":"/2019/05/09/Java面试/"},{"title":"Java字节码技术落地实践","text":"国外某大牛提过一个学习方法，每次学习新知识的时候，都要当作你在给别人讲。 聊聊字节码技术字节码增强技术探索 聊聊生产中的事故实战疑案追踪：Spring Boot内存泄露排查记 聊聊btrace上面两篇文章都谈到了btrace，我们来聊聊btrace。btrace 入门教程下面的评论蛮不错的。","link":"/2019/09/11/Java-bytecode-landing/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/05/08/hello-world/"},{"title":"caching_sha2_password","text":"1234567891011121314mysql -h localhost -u root -puse mysql;# 'root'@'%'所有服务器# 'root'@'localhost' 本机select user,host,plugin,authentication_string from user;alter user 'root'@'%' identified with mysql_native_password by '123456';alter user 'mybatis'@'%' identified with mysql_native_password by 'mybatis';select user,host,plugin,authentication_string from user;","link":"/2019/05/12/caching-sha2-password/"},{"title":"SSM配置","text":"1、Mybatis的配置sqlMapConfig.xml1234567891011121314151617&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt; &lt;!-- 配置全局属性 --&gt; &lt;settings&gt; &lt;!-- 使用jdbc的getGeneratedKeys获取数据库自增主键值 --&gt; &lt;setting name=\"useGeneratedKeys\" value=\"true\" /&gt; &lt;!-- 使用列别名替换列名 默认:true --&gt; &lt;setting name=\"useColumnLabel\" value=\"true\" /&gt; &lt;!-- 开启驼峰命名转换:Table{create_time} -&gt; Entity{createTime} --&gt; &lt;setting name=\"mapUnderscoreToCamelCase\" value=\"true\" /&gt; &lt;!-- 打印查询语句 --&gt; &lt;setting name=\"logImpl\" value=\"STDOUT_LOGGING\" /&gt; &lt;/settings&gt;&lt;/configuration&gt; sql语句为1234567CREATE TABLE `t_account` ( `id` int(5) NOT NULL AUTO_INCREMENT, `name` varchar(200) NOT NULL, `money` float(5,2) DEFAULT NULL, # https://www.cnblogs.com/shamo89/p/8202837.html PRIMARY KEY (`id`), UNIQUE KEY `UK_NAME` (`name`)) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;","link":"/2019/09/24/mm-0001-SSM配置/"},{"title":"hexo更换主题","text":"更换hexo的主题123456789#1 Go to your blog's root folder and clone Icarus into themes/icarus:git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus#2 Edit your blog's _config.yml, change the theme field to icarus to enable this theme:theme: icarus#3 cd themes/icarus &amp;&amp; git pull#4 hexo server --debug (hexo clean)","link":"/2019/09/24/mm-0003-hexo更换主题/"},{"title":"Linux下mysql的安装","text":"Linux下安装mysql，暂时只支持外网安装。内网安装教程以后继续更新…12345678910111213141516171819202122232425Linux四种安装软件的方式以及安装mysql-server https://www.cnblogs.com/yowamushi/p/8043054.html安装完成之后#1 service mysqld start#2 mysql#3 show databases;#4 use mysql;#5 show tables;#6 desc user;#7 select host,user,password from user; // host运行哪些节点来访问，默认只允许本机进行访问，不要update这个表，要通过授权！#8 grant all privileges on *.* to 'root'@'%'identified by '123' with grant option; // 授予所有权限 所有库的所有表 %所有地址#9 delete from user where host != '%';#10 select host,user,password from user;#11 flush privileges;#12 quit#12 mysql -uroot -p //Server version: 5.6.45 MySQL Community Server (GPL) 查看版本#13 123#14 show databases;#15 quit#16 ps -ef | grep mysqld=======开发=======mysql-connector-java与mysql版本的对应https://www.cnblogs.com/junzi/p/6893122.html#1 CREATE DATABASE mydatabase CHARACTER SET utf8 COLLATE utf8_general_ci;#2 show databases;","link":"/2019/09/24/mm-0002-linux下mysql的安装/"},{"title":"usemweb","text":"欢迎使用 MWebMWeb 是专业的 Markdown 写作、记笔记、静态博客生成软件，目前已支持 Mac，iPad 和 iPhone。MWeb 有以下特色： 软件本身： 使用原生的 macOS 技术打造，追求与系统的完美结合。 原则上，首先是追求界面简洁和高性能，然后才是强大易用，功能全面。 Markdown 语法： 使用 Github Flavored Markdown 语法，简称 GFM 语法。 支持表格、TOC、LaTeX、代码块、任务列表、脚注等。 画图库支持 mermaid, viz, echarts, plantuml, sequence, flow。 Markdown 辅助： 支持截图并粘贴、复制并粘贴、拖拽等方式插入图片并直接显示在编辑器内。 在兼容 Markdown 语法的情况下支持设置图片宽度。 好用的表格插入和 LaTeX 书写辅助。 Markdown 输出： 支持导出为图片、HTML、Epub、PDF、RTF、Docx。 支持发布到 Wordrpess、支持 Metaweblog API 协议的服务、Wordpress.com、印象笔记（Evernote）、Blogger、Medium、Tumblr。 图片上传服务（图床）支持 Google Photos、Imgur、七牛云、又拍云和自定义的图床服务。 Markdown 笔记： 强大的文档库支持分类树和标签管理文档，文档可归类于多个分类，可以把分类整个导出为 Epub、PDF 和生成静态网站。非常合适用于笔记、个人知识收集、管理和输出。 快速笔记：随意增加笔记及图片等素材，支持以天为单位把增加的素材组合在一个文档内，方便整理及记录历史收集情况。 快速搜索：目前已支持全局快捷键调出搜索。 外部 Markdown 文档： 外部 Markdown 文档使用外部模式管理。外部模式使用目录树的方式编辑和管理你的 markdown 文档，还能很好的支持 gitbook、JekyII、hexo 等等编辑和图片插入。 MWeb 文档：如果要更详细了解 MWeb，建议你一定要去看一下官网的帮助文档，网址为：https://zh.mweb.im/help.html。我们建议在使用文档库之前，一定要阅读一下 MWeb 文档库详细介绍 这篇文章，以便更好的使用文档库。 帮助我们改进 MWeb如果你喜欢 MWeb，想让它变得更好，你可以： 推荐 MWeb，让更多的人知道。 给我们发反馈和建议：coderforart+2333@gmail.com 在 Mac App Store 上评价 （如果是在 MAS 上购买的话）。","link":"/2019/05/08/usemweb/"},{"title":"并发(01)","text":"操作系统层JVM的线程模型实现是用户态多个线程映射成了内核态的一个线程这里就衍生出了IO密集型和计算密集型开多少线程的问题？计算密集型 那就是1:1IO密集型 …也不能太多，线程切换也是有性能损耗的 多线程编程的特点 同一份代码，可以有多个线程执行 既可以在一个CPU核上并发执行 又可以在多个CPU核上并行执行 线程的执行默认是乱序的 程序员不能假定执行次序 线程会共享数据 需要互斥 线程之间也需要合作（比如我写完什么东西，你再去读） 需要同步 ？？？ 这里又有点乱，不过没关系，先研究互斥和同步！多线程的BUG来源：原子性、可见性、有序性 互斥 同步 互斥互斥怎么实现？其实这个概念在操作系统中已经研究得非常非常透彻了。互斥，本质上就是加锁。面试题： 如何实现互斥？ 答案：加锁！ 只有获得了锁的线程，才能够对共享资源做操作，换句话说：进入临界区 对共享资源做完操作（即使发生异常），一定要释放锁！ 锁到底是个什么东西？ 需要保证原子性。最底层需要硬件指令的支持。需要锁住总线。 应用层设计锁的时候需要考虑的问题 线程申请锁的时候，发现已经被别的线程持有，该线程应该怎么办？ 继续尝试，无限循环 然后每个线程基于被分配的时间片内跑，时间片用完了，ok，对不起，请退出CPU，变为就绪状态，进入就绪队列，等待下次系统调度。 这种锁称为自旋锁 就是你的线程一直在尝试，一直尝试到你的时间片用光了，退出CPU，过一会又被调度了，又无限循环尝试。。。 把线程放到阻塞队列中 既然你拿不到锁，那么请你进入阻塞队列。 阻塞队列可能有很多线程都在等待，有一个线程离开了临界区，释放锁了，大家可以去抢这把锁了，此时操作系统会把队列中的线程，采用某种策略拿出来一个去执行 可重入性 自旋锁无法重入 解决办法 记录这个锁被谁持有 记录重入的次数 线程之间的通信1. 常用通过共享变量1234567891011// 共享变量volatile boolean loaded = false;// 线程AdoSomething();loaded = true;// 线程Bwhile(!loaded) { // doSomething} 2. wait/notify123456789101112131415161718volatile boolean loaded = false;Object monitor = new Object();// 线程AdoSomething();synchronized(monitor) { loaded = true; monitor.notify();}// 线程Bsynchronized(monitor) { while(!loaded) { monitor.wait(); // 进入阻塞队列，会释放锁,当别的线程调用monitor.notify() 的时候，只是被唤醒，并不能立即退出monitor.wait()的调用，而是还要去获取这把锁。while(条件不满足) { wait(); } 如果用if的时候，仅仅只判断一次，是不对的。因为当 wait() 返回时，有可能条件 已经发生变化了，曾经条件满足，但是现在已经不满足了，所以要重新检验条件是否满足。 }}// 后续逻辑 3. join","link":"/2019/05/20/并发-01/"},{"title":"心情随笔","text":"小凉夏 大凉夏我们都要一起努力","link":"/2019/05/09/心情随笔/"},{"title":"试试这个title是做什么的","text":"很久没有更新了，今天来回顾一下。 hexo给我们继承了git相关操作，核心的配置文件是_config.yml(有时间看看里面如何丰富) 日常操作1234$ hexo new new-blog写博客$ hexo g$ hexo d","link":"/2019/09/11/更新日志的速度不亚于赵老六/"},{"title":"springboot-foo(01)","text":"awesome-springboot学习并总结一些基于业界大佬的编写范式和一些最佳实践 环境准备基于Maven的聚合工程 操作如下 基本环境准备 gradle也是如此,推荐自己手动按照规范建立项目,手动去编写.ignore文件 12345678# mac插件cd '/Users/mizhe/learn/';mkdir awesome-springbootcd awesome-springboot &amp;&amp; touch pom.xmlmkdir -p src/main/javamkdir -p src/main/resourcesmkdir -p src/test/java# 用自己喜欢的文本编辑器打开并修改 maven的pom初始定义 123456789101112131415161718192021222324252627282930&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;xxx&lt;/groupId&gt; &lt;artifactId&gt;xxx&lt;/artifactId&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;version&gt;xxx&lt;/version&gt; &lt;properties&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;!-- &lt;finalName&gt;xxx&lt;/finalName&gt; --&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.7.0&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;encoding&gt;UTF8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; 新建一个awesome-spring-mybatis 环境搭建与上边类似,先学习在传统的spring工程中如何最佳的应用mybaties,等到迁移到springboot的时候,就自然会了.无非就是把xml改成配置bean的形式再结合springboot的autoconfig. 开始编写代码 直接用idea open就可以 项目的结构,后期提交到git的时候,手动去编写.gitignore文件 12345678awesome-springboot ├── pom.xml └── src ├── main │ ├── java │ └── resources └── test └── java 综述,这篇文章有一个问题,就是pom工程没必要去建立src目录,只是在此mark一下,后续自己的学习希望不要被这些环境搭建所困扰,一心直击技术要领! 在此要感谢一下hexo的强大,我可以用mweb写完笔记之后,用hexo g 和 hexo d两个命令即可 补充maven webapp 的目录结构 servlet3x 规范以后再补充 12345678910111213141516171819.├── pom.xml└── src └── main ├── java │ ├── dao │ ├── entity │ └── service ├── resources │ ├── jdbc.properties │ ├── mybatis-config.xml │ └── spring │ ├── spring-dao.xml │ ├── spring-service.xml │ └── spring-web.xml └── webapp ├── WEB-INF │ └── web.xml └── index.jsp pom的定义 12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;io.github.cookiespiggy&lt;/groupId&gt; &lt;artifactId&gt;spring-mybatis-demo&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;spring-mybatis-demo&lt;/finalName&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.2&lt;/version&gt; &lt;configuration&gt; &lt;path&gt;/&lt;/path&gt; &lt;!--项目访问路径。当前配置的访问是localhost:9090/, 如果配置是/aa，则访问路径为localhost:9090/aa --&gt; &lt;port&gt;9090&lt;/port&gt; &lt;uriEncoding&gt;UTF-8&lt;/uriEncoding&gt;&lt;!-- 非必需项 --&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt; mysql docker 环境搭建12345678910111213141516docker pull mysql# 带路径映射docker run --name mysql -d -p 3306:3306 -v ~/dockerdata/mysql:/var/lib/mysql -e MYSQL_DATABASE=mybatis -e MYSQL_USER=mybatis -e MYSQL_PASSWORD=mybatis -e MYSQL_ROOT_PASSWORD=root_password mysql# 不带路径映射docker run --name mysql -p 3306:3306 -e MYSQL_DATABASE=mybatis -e MYSQL_USER=mybatis -e MYSQL_PASSWORD=mybatis -e MYSQL_ROOT_PASSWORD=123456 -d mysqldocker exec -it mysql bash# 登录到mysql服务器中mysql -h localhost -u xxx -p show databases;use xxx;show tables;# docker stop id/name 之后 再用 docker start id/name 启动 建议开发环境修改如下地方: 1234567891011121314mysql -h localhost -u root -puse mysql;# 'root'@'%'所有服务器# 'root'@'localhost' 本机select user,host,plugin,authentication_string from user;alter user 'root'@'%' identified with mysql_native_password by '123456';alter user 'mybatis'@'%' identified with mysql_native_password by 'mybatis';select user,host,plugin,authentication_string from user; 有了docker之后,使我的练习环境搭建变得如此的简单! 刚写博客,感觉排版很乱,所以还是应了Linus Torvalds那句老话:Talk is cheap ,show me the code 以后还得加强啊! 共勉! JDBC环境配置12345678910&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt; 1234567891011121314151617 . ____ _ __ _ _ /\\\\ / ___&apos;_ __ _ _(_)_ __ __ _ \\ \\ \\ \\( ( )\\___ | &apos;_ | &apos;_| | &apos;_ \\/ _` | \\ \\ \\ \\ \\\\/ ___)| |_)| | | | | || (_| | ) ) ) ) &apos; |____| .__|_| |_|_| |_\\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.1.4.RELEASE)2019-05-12 21:05:52.806 INFO 8699 --- [ main] io.github.cp.App : Starting App on mizhe@Macpro with PID 8699 (/Users/mizhe/learn/awesome-springboot/springboot-mybatis-demo/target/classes started by mizhe in /Users/mizhe/learn/awesome-springboot)2019-05-12 21:05:52.809 INFO 8699 --- [ main] io.github.cp.App : No active profile set, falling back to default profiles: default2019-05-12 21:05:53.825 INFO 8699 --- [ main] io.github.cp.App : Started App in 1.585 seconds (JVM running for 2.345)class com.zaxxer.hikari.HikariDataSource2019-05-12 21:05:53.829 INFO 8699 --- [ main] com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Starting...2019-05-12 21:05:53.968 INFO 8699 --- [ main] com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Start completed.class com.zaxxer.hikari.pool.HikariProxyConnection2019-05-12 21:05:53.980 INFO 8699 --- [ Thread-4] com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Shutdown initiated...2019-05-12 21:05:53.986 INFO 8699 --- [ Thread-4] com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Shutdown completed. 12345678910spring: datasource: url: jdbc:mysql://192.168.182.142:3306/mybatis?useSSL=false username: mybatis password: mybatis # driver-class-name: 可以自动推测出 # private List&lt;String&gt; schema; List属性用 - -# schema:# - classpath:person.sql# - classpath:user.sql 数据源的相关配置在org.springframework.boot.autoconfigure.jdbc.DataSourceProperties 自动配置原理org.springframework.boot.autoconfigure.jdbc包下 DataSourceConfiguration DataSourceBuilder DataSourceInitializerInvoker DataSourceInitializer JdbcTemplateAutoConfiguration DataSourceAutoConfiguration 整合druid数据源Mybatis补充内容（01）idea中好用的插件 lombok maven helper mybatis plugin （收费了） 阿里巴巴s 用到了再一起总结 maven的配置尽量把settings配置文件 放到.m2处 这样有利于开发工具的迁移","link":"/2019/05/20/springboot-foo-01/"}],"tags":[{"name":"Java生产环境工具","slug":"Java生产环境工具","link":"/tags/Java生产环境工具/"},{"name":"mysql8.0 mysql8.+","slug":"mysql8-0-mysql8","link":"/tags/mysql8-0-mysql8/"},{"name":"ssm配置文件","slug":"ssm配置文件","link":"/tags/ssm配置文件/"},{"name":"hexo install theme","slug":"hexo-install-theme","link":"/tags/hexo-install-theme/"},{"name":"Linux下mysql的安装","slug":"Linux下mysql的安装","link":"/tags/Linux下mysql的安装/"},{"name":"并发 面试","slug":"并发-面试","link":"/tags/并发-面试/"},{"name":"如何写博客 懒人写博客","slug":"如何写博客-懒人写博客","link":"/tags/如何写博客-懒人写博客/"},{"name":"springboot mybatis maven 最佳实践","slug":"springboot-mybatis-maven-最佳实践","link":"/tags/springboot-mybatis-maven-最佳实践/"}],"categories":[]}